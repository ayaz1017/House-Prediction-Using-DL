# -*- coding: utf-8 -*-
"""House Price Prediction using ANN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSO8WtRyqTGrof-pWbPme9_0FPOKhNHQ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.callbacks import EarlyStopping

df=pd.read_csv('housing.csv')

df.shape

df.info()

df['ocean_proximity'].value_counts()

df.isnull().sum()

df.dropna(subset=['total_bedrooms'], axis=0, inplace=True)

df['ocean_proximity'].value_counts()

df['ocean_proximity']=df['ocean_proximity'].map({"<1H OCEAN":0,"INLAND":1,"NEAR OCEAN":2,"NEAR BAY":3,"ISLAND":4})

df

X=df.drop("median_house_value",axis=1)

y=df['median_house_value']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import MinMaxScaler
min_max_scaler = MinMaxScaler()
X_train = min_max_scaler.fit_transform(X_train)
X_test = min_max_scaler.transform(X_test)



model = Sequential([
    Dense(1000, input_shape=(X_train.shape[1],), activation='relu'),
    Dropout(0.2),
    Dense(500, activation='relu'),
    Dropout(0.2),
    Dense(250, activation='relu'),
    Dense(1,activation='linear')
])
model.summary()

model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])
es = EarlyStopping(monitor='val_loss',mode='min',patience=50, restore_best_weights=True)

history = model.fit(X_train, y_train, validation_data= (X_test, y_test), callbacks=[es], epochs=50, batch_size=50, verbose=1)

y_pred=model.predict(X_test)

from sklearn.metrics import r2_score, mean_squared_log_error, mean_absolute_error,mean_squared_error
y_pred = model.predict(X_test)
print("mae :", mean_absolute_error(y_test,y_pred))
print("mse :", mean_squared_error(y_test,y_pred))
print("mae :", mean_squared_log_error(y_test,y_pred))
print("score :", r2_score(y_test,y_pred))

training_loss = history.history['loss']
validation_loss = history.history['val_loss']
epochs = range(1, len(training_loss) + 1)
plt.plot(epochs, training_loss, 'b', label='Training Loss')
plt.plot(epochs, validation_loss, 'r', label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

fig, axes = plt.subplots(1,2)
axes[0].scatter(x=y_train, y=model.predict(X_train))
axes[0].set_xlabel('Actual', fontsize=10)
axes[0].set_ylabel('Prediction', fontsize=10)
axes[0].set_title('Training')
x = np.linspace(*axes[0].get_xlim())
axes[0].plot(x, x, color='red')
axes[1].scatter(x=y_test, y=model.predict(X_test))
axes[1].set_xlabel('Actual', fontsize=10)
axes[1].set_ylabel('Predicted', fontsize=10)
axes[1].set_title('Validation')
x = np.linspace(*axes[1].get_xlim())
axes[1].plot(x, x, color='red')
fig.tight_layout()
plt.show()

def pred(longitude,latitude,housing_median_age,total_rooms,total_bedrooms,population,households,median_income,ocean_proximity):
    features = np.array([longitude,latitude,housing_median_age,total_rooms,total_bedrooms,population,households,median_income,ocean_proximity])
    features_scaled = min_max_scaler.fit_transform([features])
    results = model.predict(features_scaled).reshape(1,-1)
    return results[0]

longitude = -122.2300
latitude  = 37.8800
housing_median_age  = 41.0000
total_rooms        = 880.0000
total_bedrooms   =  129.0000
population     = 322.0000
households          =    126.0000
median_income       =      8.3252
ocean_proximity       =     3.0000

price = pred(longitude,latitude,housing_median_age,total_rooms,total_bedrooms,population,households,median_income,ocean_proximity)

price

model.save("model_ann.h5")
import pickle
pickle.dump(min_max_scaler,open('scaler.pkl','wb'))

import sklearn
import tensorflow as tf
import keras

print("scikit-learn version:", sklearn.__version__)
print("TensorFlow version:", tf.__version__)
print("Keras version:", keras.__version__)

